:orphan:

======
Snooty
======

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Introduction
------------

.. figure:: /images/snooty.svg
   :alt: Snooty logo
   :align: center
   :figwidth: 700px

Snooty is a next generation documentation build system aiming to provide
a fluid and integrated writing experience.

.. note::

   Snooty is currently in an early testing stage. Expect bugs and gaps
   in functionality.

Installation
------------

.. important::

   Snooty is currently only officially supported on macOS.

1. Download and install `Visual Studio Code <https://code.visualstudio.com/>`__.

#. Start Visual Studio Code, press Shift-Command(⌘)-P, type
   ``Install 'code' command in PATH``, and press Enter. This will install a
   ``code`` command into your path which you can use to start Visual Studio Code
   from the command-line.

   This will only take effect in *new* terminal sessions.

#. Select the :guilabel:`Extensions` pane by pressing Shift-Command(⌘)-X,
   search for ``i80and.snooty``, and install it.

   .. figure:: /images/vscode-install-snooty.png
      :alt: VSCode extensions pane with snooty entered
      :figwidth: 691px

   This may take a moment while Snooty downloads and installs its dependencies.

Usage
-----

The Snooty Visual Studio Code extension will only activate when a folder
is loaded into Visual Studio Code with a ``snooty.toml`` file in the root.

.. example::

   To load the ``docs-compass`` repository with Snooty, run the
   following:

   .. code-block:: sh

      git clone https://github.com/mongodb/docs-compass.git

   Then open the ``docs-compass`` project either through the Visual Studio Code
   UI or with the following command:

   .. code-block:: sh

      code docs-compass/

   The ``docs-compass`` repository contains a ``snooty.toml`` file in
   its root, so VSCode will launch Snooty.

Once Snooty is launched, Snooty will highlight problematic source lines
as you type. By default, *green* underlines indicate a warning, and *red*
underlines indicate an error.

Prepare an Existing Giza Project to Use Snooty
----------------------------------------------

To prepare an existing Giza/Sphinx project to use Snooty, create a
``snooty.toml`` file in the *root* (i.e. adjacent to the ``conf.py`` file)
of the project.

``snooty.toml`` is a `TOML <https://github.com/toml-lang/toml>`__ file
and contains metadata describing the project.

You can use the following example to start your project:

.. code-block:: toml

   name = "guides"

   [constants]
   version = 4.0
   package-name-org = "mongodb-org"
   pgp-version = "{+version+}"

Once this file is created, run ``code .`` in the project directory
to start Visual Studio Code.

Currently, Snooty accepts the following fields in ``snooty.toml``:

.. list-table::
   :header-rows: 1

   * - Field
     - Required
     - Description

   * - ``name``
     - Required
     - An identifier string giving the *name* of the project. Should be
       all lowercase with only word characters, dashes, and underscores.

   * - ``source``
     - Optional
     - *Default*: ``"source/"``

       A path under which to find all reStructuredText source files.

   * - ``constants``
     - Required
     - A mapping of values to treat as :doc:`/reference/source-constants`.

Commands
--------

Commands in Visual Studio Code allow you to quickly instruct Snooty to
perform some action. You run commands by pressing Shift-Command(⌘)-P and
typing the name of the command.

Snooty offers the following commands:

.. list-table::
   :header-rows: 1

   * - Name
     - Description

   * - ``snooty.restart``
     - Restart Snooty. This is currently necessary if it crashes, or if
       you change your ``snooty.toml`` configuration file. Eventually, this
       will be automatic.

Bugs
----

This is a pre-pre-pre-alpha release of Snooty. The following are known
deficiencies:

* Diagnostics have wildly wrong line numbers in YAML content.
* The Snooty project is not automatically reloaded after changes to the
  configuration file.
* Snooty will not show diagnostics for files which have not been opened
  in the current project.
* Snooty should be able to automatically create a ``snooty.toml`` given
  an existing Giza project. This is currently manual.
* If the snooty download fails, the extension may be left in an inconsistent
  state.
* Non-macOS systems are not yet officially supported.
* Some valid content may show diagnostics.
* Steps and Extracts are the only supported YAML files.
* Only a single Snooty project at a time may be opened. Opening more than one
  project is currently undefined behavior.
