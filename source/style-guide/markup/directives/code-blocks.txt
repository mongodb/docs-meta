=============
Code Examples
=============

Snooty supports three directives for including code samples in a docs page:

- ``code-block``
- ``io-code-block``
- ``literalinclude``

These directives feature a monospace font and syntax highlighting that makes the
source code contained in them easier to interpret.

Code Blocks
-----------

The ``code-block`` directive formats a code sample written within the
directive.

Syntax
~~~~~~

.. code-block::

   .. code-block:: <language>
      :copyable: <boolean>
      :emphasize-lines: <line numbers>
      :linenos:
      :caption: <caption text>
      :class: <css class>
      :source: <url>

      <code sample>

Options
~~~~~~~

.. list-table::

   * - ``<language>``
     - The language to use for syntax highlighting. 
       
       For a complete list of supported languages, see the
       `leafygreen-ui GitHub repository. <https://github.com/mongodb/leafygreen-ui/tree/main/packages/code#properties>`__

       **Default:** None
 
   * - ``copyable: <boolean>``
     -  Whether to show the Copy button for the code sample.

        **Default:** ``true``

   * - ``emphasize-lines: <lines>``
     - Lines to highlight for the code sample. You can specify a range 
       of lines, individual lines, or both.

       **Default:** None

   * - ``linenos``
     - Shows line numbers for the code sample.

       **Default:** None
  
   * - ``caption: <caption text>``
     -  The caption for the code sample.

        **Default:** None

   * - ``class: <css class>``
     -  A CSS class to apply to the code sample.

        **Default:** None 

   * - ``source``
     - The URL of the full code file. This option adds a link to the 
       specified URL on the right side of the code sample. You must also specify
       ``copyable: true`` (or omit the ``copyable`` option) in order for this option
       to work.

       **Default:** None

Example 1
~~~~~~~~~

.. code-block::
   
   .. code-block:: python
      :linenos:
      :copyable: true
      :emphasize-lines: 1, 4-5
      :caption: An example Python code block

      print("Hello Docs team!") 
      print("This is Python code...") 
      print("...inside a code-block.")
      print("The line numbers are over here <-")
      print("And the Copy button is over there ->")

The previous ``code-block`` renders the following output:

.. code-block:: python
   :linenos:
   :copyable: true
   :emphasize-lines: 1, 4-5
   :caption: An example Python code block

   print("Hello Docs team!") 
   print("This is Python code...") 
   print("...inside a code-block.")
   print("The line numbers are over here <-")
   print("And the Copy button is over there ->")

Example 2
~~~~~~~~~

.. code-block::
   
   .. code-block:: python
      :source: https://github.com/mongodb/docs-ecosystem/blob/36f9cc7260a246d47cb05ac35276a2c92734b028/conf.py#L120

      html_theme = sconf.theme.name
      html_theme_path = [os.path.join(conf.paths.buildsystem, 'themes')]
      html_title = conf.project.title
      htmlhelp_basename = 'MongoDBdoc'

The previous ``code-block`` renders the following output. Notice the link to the
full source file to the right of the code sample.

.. code-block:: python
      :source: https://github.com/mongodb/docs-ecosystem/blob/36f9cc7260a246d47cb05ac35276a2c92734b028/conf.py#L120

      html_theme = sconf.theme.name
      html_theme_path = [os.path.join(conf.paths.buildsystem, 'themes')]
      html_title = conf.project.title
      htmlhelp_basename = 'MongoDBdoc'

I/O Code Blocks
---------------

The ``io-code-block`` directive formats a code sample written within the directive, but
also displays a second window for the output of the code sample.

Syntax
~~~~~~

.. code-block::

   .. io-code-block::
      :copyable: <boolean>
      :caption: <caption text>
      :class: <css class>
      :source: <url>
      
      .. input::
         :language: <input language>
         :emphasize-lines: <line numbers>
         :linenos:

         <input code>

      .. output::
         :language: <output language>
         :emphasize-lines: <line numbers>
         :linenos:
         :visible: <boolean>

         <output code>

Options
~~~~~~~

.. list-table::

   * - ``copyable: <boolean>``
     -  Whether to show the Copy button for the input code.
   
        **Default:** ``false``
   
   * - ``:language:``
     - The language to use for syntax highlighting. You can specify
       different languages for the input and output code. 
       
       For a complete list of supported languages, see the
       `leafygreen-ui GitHub repository. <https://github.com/mongodb/leafygreen-ui/tree/main/packages/code#properties>`__

       **Default:** No syntax highlighting

   * - ``linenos``
     - Shows line numbers for the code sample.

       **Default:** No line numbers

   * - ``emphasize-lines: <lines>``
     - Lines to highlight for the code sample. You can specify a range 
       of lines, individual lines, or both.

       **Default:** No highlighting
   
   * - ``visible: <boolean>``
     - Whether the output code begins visible. If ``false``, the user 
       must click a button to see the output.

       **Default:** ``true``

   * - ``caption: <caption text>``
     - The caption for the code sample.

       **Default:** None

   * - ``class: <css class>``
     - A CSS class to apply to the code sample.

       **Default:** None 

   * - ``source``
     - The URL of the full code file. This option adds a link to the 
       specified URL on the right side of the code sample. You must also specify
       ``copyable: true`` in order for this option to work.
       
       **Default:** None

Example 1
~~~~~~~~~

.. code-block::

   .. io-code-block::
      :copyable: true
      :caption: An example Python code block with output

      .. input::
         :language: python
         :emphasize-lines: 1
         :linenos:

         print("Hello Docs team!") 
         print("This is Python code...") 
         print("...inside an io-code-block.")

      .. output::
         :language: shell
         :emphasize-lines: 1
         :linenos:
         :visible: false

         "Hello Docs team!"
         "This is Python code..."
         "...inside an io-code-block."

.. io-code-block::
   :copyable: true
   :caption: An example Python code block with output

   .. input::
      :language: python
      :emphasize-lines: 1
      :linenos:

      print("Hello Docs team!") 
      print("This is Python code...") 
      print("...inside an io-code-block.")

   .. output::
      :language: shell
      :emphasize-lines: 1
      :linenos:

      "Hello Docs team!"
      "This is Python code..."
      "...inside an io-code-block."

Example 2
~~~~~~~~~

.. code-block::
   
   .. io-code-block::
      :source: https://github.com/mongodb/docs-node/blob/0cf95d4eac536ed0ae1a2085948dd98f24ac48af/source/quick-reference.txt#L473
      :copyable: true

      .. input::
         :language: javascript
         
         coll.find({ $text: { $search: 'zissou' } });

      .. output::
         :language: javascript

         [
             { title: 'The Life Aquatic with Steve Zissou', ... }
         ]

The previous ``io-code-block`` renders the following output. Notice the link to the
full source file on the right of the code sample.

.. io-code-block::
   :source: https://github.com/mongodb/docs-node/blob/0cf95d4eac536ed0ae1a2085948dd98f24ac48af/source/quick-reference.txt#L473
   :copyable: true

   .. input::
      :language: javascript
         
      coll.find({ $text: { $search: 'zissou' } });

   .. output::
      :language: javascript

      [
          { title: 'The Life Aquatic with Steve Zissou', ... }
      ]

Literal Includes
----------------

The ``literalinclude`` directive formats a code sample pulled in from another file.
This directive is helpful if you need to maintain a separate file that includes the code
or if you need to display the same code sample in more than one place.

Syntax
~~~~~~

.. code-block::

   .. literalinclude:: <file path>
      :start-after: <line of code>
      :end-before: <line of code>
      :language: <language>
      :copyable: <boolean>
      :caption: <caption>
      :dedent: <number>
      :emphasize-lines: <line numbers>
      :lineno-start: <line number>
      :linenos:

Options
~~~~~~~

.. list-table::

   * - ``<language>``
     - The language to use for syntax highlighting. 
       
       For a complete list of supported languages, see the
       `leafygreen-ui GitHub repository. <https://github.com/mongodb/leafygreen-ui/tree/main/packages/code#properties>`__

       **Default:** None
 
   * - ``copyable: <boolean>``
     - Whether to show the Copy button for the code sample.

       **Default:** ``true``

   * - ``start-after: <line of code>``
     - The line of code before the line where the extract should begin.

       **Default:** Start at beginning of file
   
   * - ``end-before: <line of code>``
     - The line of code after the line where the extract should end.

       **Default:** Finish at end of file

   * - ``emphasize-lines: <lines>``
     - Lines to highlight for the code sample. You can specify a range 
       of lines, individual lines, or both.

       **Default:** None

   * - ``linenos``
     - Shows line numbers for the code sample.

       **Default:** None
  
   * - ``caption: <caption text>``
     - The caption for the code sample.

       **Default:** None

   * - ``dedent: <number>``
     - The number of spaces to remove from the beginning of the line. Use this option
       if the code you want to show is indented. 

       **Default:** None 

   * - ``lineno-start``
     - The number where line numbering should start. This option does nothing without the ``:linenos:`` option.

       **Default:** None

Example 1
~~~~~~~~~

Suppose a Python file looks like this:

.. literalinclude:: /includes/python-sample.py

This sample starts at the beginning of the file and ends before the line that reads,
``print("...but this line won't.")``: 

.. code-block::
   
The previous ``literalinclude`` renders the following output:

.. literalinclude:: /includes/python-sample.py
   :copyable: false
   :end-before: print("...but this line won't.")
   :caption: Sample Python code from another file

Example 2
~~~~~~~~~

You can use comments to mark the starting and ending points of a code sample.
This is useful if you need to extract multiple samples from the same file while
avoiding ambiguity. You also won't need to update the docs if the code changes.

This sample uses dedent to remove the spaces at the beginning of these lines, which
are indented inside a function in the original code file.

.. rebuidl docs after code change?

.. code-block::

   .. code-block:: python

      .. literalinclude:: /includes/python-sample.py
         :dedent: 2
         :start-after: # start-python-sample
         :end-before: # end-python sample
         :linenos:
         :lineno-start: 9 

The previous ``code-block`` renders the following output:

.. code-block:: python

   .. literalinclude:: /includes/python-sample.py
      :dedent: 2
      :start-after: # start-python-sample
      :end-before: # end-python-sample
      :linenos:
      :lineno-start: 9 