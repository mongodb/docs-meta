=============
Code Examples
=============

Snooty supports three directives for including code samples in a docs page:

- ``code-block``
- ``io-code-block``
- ``literalinclude``

These directives feature a monospace font and syntax highlighting that makes the
source code contained in them easier to interpret.

Code Blocks
-----------

The ``code-block`` directive formats a code sample written beneath the
directive.

Syntax
~~~~~~

.. code-block::

   .. code-block:: <language>
      :copyable: <boolean>
      :emphasize-lines: <line numbers>
      :linenos:
      :caption: <caption text>
      :source: <url>

      <code sample>

Options
~~~~~~~

.. list-table::

   * - ``<language>``
     - The language to use for syntax highlighting. 
       
       For a complete list of supported languages, see the
       `leafygreen-ui GitHub repository. <https://github.com/mongodb/leafygreen-ui/tree/main/packages/code#properties>`__

       **Default:** None
 
   * - ``:copyable: <boolean>``
     -  Whether to show the Copy button for the code sample.

        **Default:** ``true``

   * - ``:emphasize-lines: <line number>``
     - Lines to highlight for the code sample. You can specify a range 
       of line numbers, individual line numbers, or both.

       **Default:** None

   * - ``:linenos``
     - Shows line numbers for the code sample.

       **Default:** None
  
   * - ``:caption: <caption text>``
     -  The caption for the code sample.

        **Default:** None 

   * - ``:source: <url>``
     - The URL of the code file. This option adds a link to the 
       specified URL on the right side of the code sample.
       
       You must also specify ``:copyable: true`` (or omit the ``:copyable:`` option)
       for this option to work.
       
       **Default:** None

Example 1
~~~~~~~~~

.. code-block::
   
   .. code-block:: python
      :linenos:
      :copyable: true
      :emphasize-lines: 1, 4-5
      :caption: An example Python code block

      print("Hello Docs team!") 
      print("This is Python code...") 
      print("...inside a code-block.")
      print("The line numbers are over here <-")
      print("And the Copy button is over there ->")

The previous ``code-block`` directive creates the following output:

.. code-block:: python
   :linenos:
   :copyable: true
   :emphasize-lines: 1, 4-5
   :caption: An example Python code block

   print("Hello Docs team!") 
   print("This is Python code...") 
   print("...inside a code-block.")
   print("The line numbers are over here <-")
   print("And the Copy button is over there ->")

Example 2
~~~~~~~~~

.. code-block::
   
   .. code-block:: python
      :source: https://github.com/mongodb/docs-ecosystem/blob/36f9cc7260a246d47cb05ac35276a2c92734b028/conf.py#L120

      html_theme = sconf.theme.name
      html_theme_path = [os.path.join(conf.paths.buildsystem, 'themes')]
      html_title = conf.project.title
      htmlhelp_basename = 'MongoDBdoc'

The previous ``code-block`` directive creates the following output:

.. code-block:: python
      :source: https://github.com/mongodb/docs-ecosystem/blob/36f9cc7260a246d47cb05ac35276a2c92734b028/conf.py#L120

      html_theme = sconf.theme.name
      html_theme_path = [os.path.join(conf.paths.buildsystem, 'themes')]
      html_title = conf.project.title
      htmlhelp_basename = 'MongoDBdoc'

I/O Code Blocks
---------------

The ``io-code-block`` directive formats a code sample written beneath the directive, but
also displays a second window for the sample's output.

Syntax
~~~~~~

.. code-block::

   .. io-code-block::
      :copyable: <boolean>
      :caption: <caption text>
      :source: <url>
      
      .. input::
         :language: <input language>
         :emphasize-lines: <line numbers>
         :linenos:

         <input code>

      .. output::
         :language: <output language>
         :emphasize-lines: <line numbers>
         :linenos:
         :visible: <boolean>

         <output code>

Options
~~~~~~~

.. list-table::

   * - ``:copyable: <boolean>``
     -  Whether to show the Copy button for the input code.
   
        **Default:** ``false``
   
   * - ``:language:``
     - The language to use for syntax highlighting. You can specify
       different languages for the input and output code. 
       
       For a complete list of supported languages, see the
       `leafygreen-ui GitHub repository. <https://github.com/mongodb/leafygreen-ui/tree/main/packages/code#properties>`__

       **Default:** None

   * - ``:linenos:``
     - Shows line numbers for the code sample.

       **Default:** None

   * - ``:emphasize-lines: <line number>``
     - Lines to highlight for the code sample. You can specify a range 
       of line numbers, individual line numbers, or both.

       **Default:** None
   
   * - ``:visible: <boolean>``
     - Whether the output code is initially visible. If ``false``, the user 
       must click a button to see the output.

       **Default:** ``true``

   * - ``:caption: <caption text>``
     - The caption for the code sample.

       **Default:** None

   * - ``:source: <url>``
     - The URL of the code file. This option adds a link to the 
       specified URL on the right side of the code sample.
       
       You must also specify ``copyable: true`` for this option to work.
       
       **Default:** None

Example 1
~~~~~~~~~

.. code-block::

   .. io-code-block::
      :copyable: true
      :caption: An example Python code block with output

      .. input::
         :language: python
         :emphasize-lines: 1
         :linenos:

         print("Hello Docs team!") 
         print("This is Python code...") 
         print("...inside an io-code-block.")

      .. output::
         :language: shell
         :emphasize-lines: 1
         :linenos:
         :visible: false

         "Hello Docs team!"
         "This is Python code..."
         "...inside an io-code-block."

.. io-code-block::
   :copyable: true
   :caption: An example Python code block with output

   .. input::
      :language: python
      :emphasize-lines: 1
      :linenos:

      print("Hello Docs team!") 
      print("This is Python code...") 
      print("...inside an io-code-block.")

   .. output::
      :language: shell
      :emphasize-lines: 1
      :linenos:

      "Hello Docs team!"
      "This is Python code..."
      "...inside an io-code-block."

Example 2
~~~~~~~~~

.. code-block::
   
   .. io-code-block::
      :source: https://github.com/mongodb/docs-node/blob/0cf95d4eac536ed0ae1a2085948dd98f24ac48af/source/quick-reference.txt#L473
      :copyable: true

      .. input::
         :language: javascript
         
         coll.find({ $text: { $search: 'zissou' } });

      .. output::
         :language: javascript

         [
             { title: 'The Life Aquatic with Steve Zissou', ... }
         ]

The previous ``io-code-block`` directive creates the following output:

.. io-code-block::
   :source: https://github.com/mongodb/docs-node/blob/0cf95d4eac536ed0ae1a2085948dd98f24ac48af/source/quick-reference.txt#L473
   :copyable: true

   .. input::
      :language: javascript
         
      coll.find({ $text: { $search: 'zissou' } });

   .. output::
      :language: javascript

      [
          { title: 'The Life Aquatic with Steve Zissou', ... }
      ]

Literal Includes
----------------

The ``literalinclude`` directive formats a code sample pulled in from another file.
This directive is helpful if you need to keep the code in a separate file
or if you need to display the same code sample in more than one place.

.. note::  include vs. literalinclude

   Use the ``include`` directive to include an ``rst`` file in the docs. Use the
   ``literalinclude`` directive to include a code file in the docs.

Syntax
~~~~~~

.. code-block::

   .. literalinclude:: <file path>
      :language: <language>
      :copyable: <boolean>
      :start-after: <line of code>
      :end-before: <line of code>
      :linenos:
      :lineno-start: <line number>
      :emphasize-lines: <line numbers>
      :caption: <caption>
      :dedent: <number>

Options
~~~~~~~

.. list-table::

   * - ``<file path>``
     - **Required.** The path to the file in the repository that contains the code you
       want to show.

       **Default:** None

   * - ``:language: <language>``
     - The language to use for syntax highlighting. 
       
       For a complete list of supported languages, see the
       `leafygreen-ui GitHub repository. <https://github.com/mongodb/leafygreen-ui/tree/main/packages/code#properties>`__

       **Default:** None
 
   * - ``:copyable: <boolean>``
     - Whether to show the Copy button for the code sample.

       **Default:** ``true``

   * - ``:start-after: <line of code>``
     - The line of code before the first line that you want to include in the sample.

       **Default:** Beginning of file
   
   * - ``:end-before: <line of code>``
     - The line of code after the last line that you want to include in the sample.

       **Default:** End of file

   * - ``:linenos:``
     - Shows line numbers for the code sample.

       **Default:** None
 
   * - ``:lineno-start:``
     - The number at which to start line numbering. This option requires the
       ``:linenos:`` option.

       **Default:** 1

   * - ``:emphasize-lines: <line number>``
     - Lines to highlight for the code sample. You can specify a range 
       of line numbers, individual line numbers, or both.

       **Default:** None
 
   * - ``:caption: <caption text>``
     - The caption for the code sample.

       **Default:** None

   * - ``:dedent: <number of spaces>``
     - The number of spaces to remove from the beginning of each line of code.
       Use this option if the code you want to show is indented in the code file.

       **Default:** None 

Example 1
~~~~~~~~~

Suppose you want to include samples from the following Python file in a docs page:

.. literalinclude:: /includes/python-sample.py
   :language: python

The following ``literalinclude`` directive starts with the first line of the file and
ends before the line that reads ``print("...but this line won't.")``: 

.. code-block::
 
   .. literalinclude:: /includes/python-sample.py
      :copyable: false
      :end-before: print("...but this line won't.")
      :caption: Sample Python code from another file
  
The previous ``literalinclude`` directive creates the following output:

.. literalinclude:: /includes/python-sample.py
   :copyable: false
   :end-before: print("...but this line won't.")
   :caption: Sample Python code from another file

Example 2
~~~~~~~~~

You can use comments to mark the points where the ``literalinclude`` directive
starts and finishes pulling in code.
By using comments instead of code, you can unambiguously specify the start and end of
the code sample, regardless of how many samples you're pulling in from the file.
You also won't need to update the directive if the extracted code changes.

In the Python file in the previous example, the code inside ``sample_function()`` is
indented two spaces. The following ``literalinclude`` directive uses the ``:dedent:``
option to remove these spaces:

.. code-block::

   .. literalinclude:: /includes/python-sample.py
      :start-after: # start-function-sample
      :end-before: # end-function-sample
      :linenos:
      :lineno-start: 9 
      :dedent: 2

The previous directive creates the following output:


.. literalinclude:: /includes/python-sample.py
   :start-after: # start-function-sample
   :end-before: # end-function-sample
   :linenos:
   :lineno-start: 9 
   :dedent: 2