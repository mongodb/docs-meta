===========================
Writing NightmareJS Scripts
===========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Introduction
------------

Web-based screen capture scripts, for Atlas and Charts, are
written in Javascript and use the
`NightmareJS <https://github.com/segmentio/nightmare>`__ browser
automation framework. These scripts open a headless browser to navigate
to and capture the target page using the
`Nightmare.screenshot() <https://github.com/segmentio/nightmare#screenshotpath-clip>`_
function.

Prerequisites
-------------

- `Node.js (7.6.0 or greater) <https://nodejs.org/en/>`_

- :abbr:`NPM (Node Package Manager)` (Included with Node.js)

Example
-------

For an example Nightmare script which takes a screenshot of the
`Charts Data Sources <http://charts.mongodb.parts/data-sources>`__ page,
refer to the
`data-sources.js <https://raw.githubusercontent.com/mongodb/docs-assets/screenshot-scripts/data-sources.js>`_
script on GitHub.

This file can be used as a template when writing your own screencapture
scripts.

Setup
-----

Folder Structure
~~~~~~~~~~~~~~~~

If it does not exist already, create a folder called
``screenshot-scripts`` in the root directory of the documentation
repository. The Nightmare automation scripts are stored in this folder.
You can copy the example ``data-sources.js`` script provided above into
this folder to easily get started writing your own scripts.

.. _nightmare_login_information:

Login Information
~~~~~~~~~~~~~~~~~

To specify login information for tools such as Atlas where credentials
must be entered to proceed to further pages, you must create a
hidden properties file containing your login information called
``.properties.ini`` in the ``screenshot-scripts`` directory.

The ``.properties.ini`` has the following format:

.. code-block:: ini

   [atlasUser]
   login.username = testusername
   login.password = testpassword

   [chartsUser]
   login.email = test@email.com
   login.password = testpassword

Change the values of ``login.username`` and ``login.password`` to match
the appropriate credentials for each service. To access the variables
in the properties file, use the following syntax in your Nightmare
script:

.. code-block:: javascript

   const atlasUsername = properties.get('atlasUser.login.username');
   const atlasPassword = properties.get('atlasUser.login.password');

.. tip::

   You can log in to Atlas and Charts using a single function call. To
   log in to one of these services, set the first line of your
   Nightmare automation to ``await options.loginTo<Service>();``, as in
   the following example:

   .. code-block:: javascript

      exports.run = async function(options) {
        const nightmare = options.nightmare;
        const originalPath = `${origImageDir}/${screenshotNames[0]}`;
        const screenshotPath = `${screenshotDir}/${screenshotNames[0]}`;

         // Go to atlas login page and login
         await options.loginToAtlas();

         // Automation continues from the Atlas landing page...

Nightmare Configuration
-----------------------

The following section highlights the key properties of the Nightmare
instance and which properties you may need to modify to fit your
use case. The Nightmare instance properties are specified in the
``nightmare_props`` object of the ``screenshot-tool/util.js`` file.

For a complete list of properties available for a Nightmare instance,
refer to the
`Electron documentation <https://github.com/electron/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions>`__.

By default, the ``nightmare_props`` object looks like the following:

.. code-block:: javascript

   exports.nightmare_props = {
     show: true,
     typeInterval: 20,
     height: 1000,
     width: 1500,
     webPreferences: {
       zoomFactor: 1.0
     }
   }

.. list-table::
   :header-rows: 1
   :widths: 20 20 60

   * - Property
     - Type
     - Description

   * - show
     - boolean
     - When ``true``, Nightmare is visible and cannot be minimzed. When
       ``false``, Nightmare operates entirely in the background. Having
       the browser visible may be useful when writing scripts or
       debugging.

   * - width
     - integer
     - The width in pixels of the Nightmare browser viewport

   * - height
     - integer
     - The height in pixels of the Nightmare browser viewport

   * - zoomFactor
     - decimal
     - The zoom level of the Nightmare browser viewport. Tweaking
       this value can help obtain screenshots in the best resolution.

Taking Screenshots
------------------

Once NightmareJS is configured, it's possible to either:

- :ref:`Capture a specific element or region on a page <select-region-of-page>` or

- :ref:`Capture the entire page <capture-entire-page>`

.. _select-region-of-page:

Selecting a Region of the Page to Capture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To take a screenshot of a specific element on a page, Nightmare scripts
utilize the
`getClientRects() <https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects>`_
function. This function gets the size and position of an element which
are then passed to the screenshot function so the screenshot can be
clipped appropriately.

.. important::

   :abbr:`DOM (Document Object Model)` elements in the browser are
   only accessible to Nightmare through the
   `.evaluate() <https://github.com/segmentio/nightmare#evaluatefn-arg1-arg2>`_
   function.

.. example::

   The following ``evaluate()`` function of a Nightmare script captures
   only the :guilabel:`Build a New Cluster` button on the Atlas
   landing page, which is matched by
   ``document.querySelector('.button-is-primary')``.

   .. code-block:: javascript

      const button_clip = await nightmare.evaluate(() => {

        // store the button in a variable
        const build_cluster_btn = document.querySelector('.button-is-primary');

        // use the getClientRects() function on the button to determine
        // the size and location
        const [rect] = build_cluster_btn.getClientRects();

        // convert the rectangle to a clip object and return it
        return {
          top: rect.top,
          right: rect.right,
          bottom: rect.bottom,
          left: rect.left,
          width: rect.width,
          height: rect.height
        };
      })

      // take the screenshot
      await nightmare.screenshot('/path/to/screenshot', button_clip)

.. _capture-entire-page:

Capturing the Entire Page
~~~~~~~~~~~~~~~~~~~~~~~~~

To screenshot the entire page using Nightmare, remove the ``evaluate``
function and simply use ``Nightmare.screenshot`` without
specifying a ``clip`` object.

.. example::

   The following function takes a screenshot of the *entire* Atlas
   login page:

   .. code-block:: javascript

      exports.run = async function (options) {
        console.log('Running ' + path.basename(__filename));
        // start Nightmare
        const nightmare = Nightmare(util.nightmare_props);

        const screenshot_dir = './cloud-screenshots-temp/'

        // go to atlas login page
        await nightmare.goto('https://cloud.mongodb.com/user#/atlas/login')
        await nightmare.wait(input[name="username"])
        await nightmare.screenshot('/path/to/screenshot')
        await nightmare.wait(500)
     }

Comparing Images
----------------

.. include:: /includes/fact-screencapture-compare-images.rst

.. seealso::

   - `NightmareJS documentation <https://github.com/segmentio/nightmare>`_

   - `Nightmare.screenshot <https://github.com/segmentio/nightmare#screenshotpath-clip>`_

